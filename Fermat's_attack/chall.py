from Crypto.Util.number import getPrime, isPrime
from Crypto.Util.number import long_to_bytes as ltb, bytes_to_long as btl
from random import randint
from sympy import nextprime
from secret import FLAG

def genprimes():
    ok = btl(b'nn90ckh04_w4s_h3r3')
    while True:
        p = getPrime(2048)
        min_q_candidate = ok * p + pow(2, 1023)
        max_q_candidate = ok * p + pow(2, 1024) - 1

        # Use sympy's nextprime to find the next prime greater than or equal to the minimum candidate
        q = nextprime(min_q_candidate - 1)
        if q <= max_q_candidate:
            return p, q

p, q = genprimes()

n = p * q
e = 65537
msg = btl(FLAG)
c = pow(msg, e, n)

print(f"{n = }")
print(f"{e = }")
print(f"{c = }")


"""
n = 9897669433844324375026327036645644057452658386669793931440754083215848332349237677180927386473059800686604812236510892507860178190062368486456908770834822933469229293006080931221178138738454025683871646962482982576843991500289713945305323741494467665119646657704123248615791402850301134657730278026599049529396669898088762398856541074207793957827521224756934821185424179939422284131377741339479122986655035081132869385634611467284962017492084658651147821158689440294717447293427113121517228886959124654450594782525896482664871792296572116742809032096619513710465289972958293961926459092189043983259736359131524180336268895018422743819139052434619421736059657617565911251099141619750427396505222425671535361544585230071017946915375424559969025920055487271544704024697952053988747643616906291849470538105709363143122672950523725116976713631061848520029002982406862705951999283645357357517008467594792200188664610089951897556744588794839248930435614661529489739074335072531622472625751477779569392136959031238155589843304854285739480657530081381232419786163554422407739440544119757474723534128560478303306608044467598169252274294891193785998557475622482394441012510017759768222006958026690343888193135172525410132947085241015922234682155469234752518415363297037729957690041391363
e = 65537
c = 1238054123102564705971623373086666346738195310810610212004230328387344518827282944005765246219575357434372681152433440018438551070421510278796869121203296315276950902587070561479750673180423136488310183777651363585661833965874024238280653798547124758774047890615907469180291356272830591754611445459216032030853742111306420411110401963326730412564327518342914778252682988125305873840507952898020957692067443439954510607117474140248199538158095608014850563522734836235905732430596129380473425143928283611112005201366393916073374190797646721326408649362242301122948773877138409078517486066699148096222340093598281834007454276711422441520409759433482074818661904791106805730923181562416987807309384841367494501765999107946936251505972587027931396552870937155567668757410933178456751671531707628390043937673949222248390308792102033208825081315894739636745789633915574308473115460956339622097544342123889602908015701797511205183664054475316318696316940486583667970437244709841779149669342381267389198926954050419155975861996525112505095608969014947425456914084177523498289338091966434372392529974270392922631126993560909978667085019213773921649177294799350736169290477711681253440908486589048633982067662961404732030290793124728772461105753287974997946721636918065483872601517659787

"""



