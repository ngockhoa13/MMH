from Crypto.Util.number import long_to_bytes as ltb, bytes_to_long as btl

def extended_euclid_gcd(a, b):
    
    s = 0; old_s = 1
    t = 1; old_t = 0
    r = b; old_r = a

    while r != 0:
        quotient = old_r//r 
        old_r, r = r, old_r - quotient*r
        old_s, s = s, old_s - quotient*s
        old_t, t = t, old_t - quotient*t
    return [old_r, old_s, old_t]

n = 107134870430813189645882484100833022762609284797615973689883996254723080902485547524527027103179260290016317812761007542319744101663285995237151198871297684007040766788327415986942170855041906741506156832353589854297154536809777479546012849098651040112235391776555662314987184071843321491087369634120481147041
e1 = 71
e2 = 101
c1 = 83864568465138779882910366965980013620629845890710956120302270144769701416149339128668188680182735905951579270028136183540166952237531777634570020422505733711873906622991895081303689281724637541489714713551478839452749906442325819094904846211331110253518358599417252111565272989748759144633889964824784045008
c2 = 26879051489881487980558451823719222194604990480989321681145557353738340068343371415520479319415896527047949828376357639032230483800899257624991672631708681376232481672369681654873617488352304396490709707936637869232157408550576919598829742862475770091566098943457458619827987421018489471184199933544162321478

gcd, x, y = extended_euclid_gcd(e1, e2)
m = (pow(c1, x, n) * pow(c2, y, n)) % n
print(ltb(m))


